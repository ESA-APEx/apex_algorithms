{
    "description": "# Biophysical Parameters \n\nCalculate various biophysical parameters for an area defined by area of interest. The result is a GeoTiff file\ncontaining the parameter values. A strict cloudmask is applied, to avoid cloud contamination.\n                    \nThe **Leaf Area Index (LAI)** is defined as half the total area of a canopy's green elements \nper unit horizontal ground area. The satellite-derived value corresponds to the total green LAI \nof all the canopy layers, including the understory, which may represent a very significant \ncontribution, particularly for forests. The LAI distributed by Terrascope is also known as GAI, \nwhich stands for Green Area Index, and is related to the green part of the vegetation only\n (i.e. not only the leaves, but excluding the non-green parts).\n\nThe **Fraction of Absorbed Photosynthetic Active Radiation (fAPAR)** quantifies the fraction \nof solar radiation absorbed by leaves for the photosynthetic activity. It depends on the \ncanopy structure, vegetation element optical properties, atmospheric conditions, and angular \nconfiguration.\n\nThe **Fraction of Vegetation Coverage (fCOVER)** corresponds to the fraction of ground \ncovered by green vegetation. Practically, it quantifies the vegetation's spatial extent.\n\nThe **Canopy Water Content (CWC)** is the water mass per unit ground area and is a key \nvegetation indicator in agriculture and forestry applications.\n\nThe **Canopy Chlorophyll Content (CCC)** is defined as the total chlorophyll content per \nunit ground area in a contiguous group of plants. It is well suited for quantifying canopy \nlevel nitrogen content and gross primary production estimation.\n\n### Methodology\n\nThe methodology used to derive the biophysical parameters from Sentinel-2 is developed by INRA-\nEMMAH. The methodology was initially developed to generate biophysical products from SPOT-\nVEGETATION, ENVISAT-MERIS, SPOT-HRVIR, and LANDSAT-OLI sensors and was later adapted for\nSentinel-2. It mainly consists in simulating a comprehensive data base of canopy (TOC) reflectances\nbased on vegetation characteristics and observation and illumination geometry. Neural networks are\nthen trained to estimate a number of these canopy characteristics (BIOPARs) from the simulated TOC\nreflectances along with set corresponding angles defining the observational configuration.\n\n### Quality\n\n [RD1] reports RMSE\nvalues of 0.89 for LAI, 0.05 for FAPAR, 0.4 for FCOVER, 56 Âµg/cm2 for CCC and 0.03 g/cm2 for CWC\nwhich demonstrate a good performance of the network. FAPAR and FCOVER show the best\nperformance, with higher RMSE values for mid-range values of the product. LAI is well estimated up\nto values of LAI=6, and increasing uncertainties with LAI, and thus also CCC and CWC because of their\ndependency on LAI, are observed. Furthermore, the networks are unbiased between the BIOPAR\nvariables as expected.\n\n### Links\n\n- [RD1] Weiss, M., Baret, F. (2016). S2ToolBox Level 2 products: LAI, FAPAR, FCOVER, version\n1.1, 02/05/2016. http://step.esa.int/docs/extra/ATBD_S2ToolBox_L2B_V1.1.pdf",
    "id": "biopar",
    "links": [
        {
            "href": "https://raw.githubusercontent.com/ESA-APEx/apex_algorithms/3b5a011a90f4a3050ff8fdf69ca5bc2fd1535881/openeo_udp/biopar/biopar.json",
            "rel": "canonical",
            "title": "Public URL for user-defined process 'biopar'"
        },
        {
            "href": "https://marketplace-portal.dataspace.copernicus.eu/catalogue/app-details/21",
            "rel": "about",
            "title": "openEO Algorithm Plaza"
        }
    ],
    "parameters": [
        {
            "description": "Left-closed temporal interval, i.e. an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Also supports open intervals by setting one of the boundaries to `null`, but never both.",
            "name": "temporal_extent",
            "schema": {
                "examples": [
                    [
                        "2015-01-01T00:00:00Z",
                        "2016-01-01T00:00:00Z"
                    ],
                    [
                        "2015-01-01",
                        "2016-01-01"
                    ]
                ],
                "items": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "subtype": "date-time",
                            "type": "string"
                        },
                        {
                            "format": "date",
                            "subtype": "date",
                            "type": "string"
                        },
                        {
                            "maxLength": 4,
                            "minLength": 4,
                            "pattern": "^\\d{4}$",
                            "subtype": "year",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "maxItems": 2,
                "minItems": 2,
                "subtype": "temporal-interval",
                "type": "array"
            }
        },
        {
            "description": "This geometries defines the bounds of the resulting image. Pixels outside the polygon are set to nodata.",
            "name": "geometries",
            "schema": {
                "subtype": "geojson",
                "type": "object"
            }
        },
        {
            "default": "FAPAR",
            "description": "BIOPAR type [FAPAR,LAI,FCOVER,CCC,CWC]",
            "name": "biopar_type",
            "optional": true,
            "schema": {
                "type": "string",
                "enum": ["FAPAR", "LAI", "FCOVER", "CCC", "CWC"]
            }
        }
    ],
    "process_graph": {
        "adddimension1": {
            "arguments": {
                "data": {
                    "from_node": "reducedimension1"
                },
                "label": {
                    "from_parameter": "biopar_type"
                },
                "name": "bands",
                "type": "bands"
            },
            "process_id": "add_dimension",
            "result": true
        },
        "filterspatial1": {
            "arguments": {
                "data": {
                    "from_node": "filtertemporal1"
                },
                "geometries": {
                    "from_parameter": "geometries"
                }
            },
            "process_id": "filter_spatial"
        },
        "filtertemporal1": {
            "arguments": {
                "data": {
                    "from_node": "loadcollection1"
                },
                "extent": {
                    "from_parameter": "temporal_extent"
                }
            },
            "process_id": "filter_temporal"
        },
        "loadcollection1": {
            "arguments": {
                "bands": [
                    "B03",
                    "B04",
                    "B08",
                    "sunAzimuthAngles",
                    "sunZenithAngles",
                    "viewAzimuthMean",
                    "viewZenithMean",
                    "SCL"
                ],
                "id": "SENTINEL2_L2A",
                "spatial_extent": null,
                "temporal_extent": null
            },
            "process_id": "load_collection"
        },
        "maskscldilation1": {
            "arguments": {
                "data": {
                    "from_node": "filterspatial1"
                },
                "scl_band_name": "SCL"
            },
            "process_id": "mask_scl_dilation"
        },
        "reducedimension1": {
            "arguments": {
                "data": {
                    "from_node": "maskscldilation1"
                },
                "dimension": "bands",
                "reducer": {
                    "process_graph": {
                        "runudf1": {
                            "arguments": {
                                "context": {
                                    "biopar_type": {
                                        "from_parameter": "biopar_type"
                                    }
                                },
                                "data": {
                                    "from_parameter": "data"
                                },
                                "runtime": "Python",
                                "udf": "from functools import lru_cache\nfrom pathlib import Path\nimport numpy as np\nfrom typing import Dict\nimport xarray as xr \nfrom openeo.udf.xarraydatacube import XarrayDataCube\nfrom openeo.udf.debug import inspect\nfrom biopar.bioparnp import BioParNp\n\n@lru_cache(maxsize=6)\ndef get_bioparrun(biopar) -> BioParNp:\n    return BioParNp(version='3band', parameter=biopar, singleConfig = True)\n    \ndef apply_datacube(cube: XarrayDataCube, context: Dict) -> XarrayDataCube:\n    valid_biopars= ['FAPAR','LAI','FCOVER','CWC','CCC']\n    biopar = context.get('biopar_type', 'FAPAR') \n    if biopar not in valid_biopars:\n        biopar = 'FAPAR'\n        inspect(biopar, \"is not in valid Biopar list, defaulting to FAPAR\") \n    \n    inarr = cube.get_array()\n    ds_date = inarr\n    \n    from numpy import cos, radians\n    scaling_bands = 0.0001\n\n    saa = ds_date.sel(bands='sunAzimuthAngles')\n    sza = ds_date.sel(bands='sunZenithAngles')\n    vaa = ds_date.sel(bands='viewAzimuthMean')\n    vza = ds_date.sel(bands='viewZenithMean')\n    \n    B03 = ds_date.sel(bands='B03') * scaling_bands\n    B04 = ds_date.sel(bands='B04') * scaling_bands\n    B8 = ds_date.sel(bands='B08') * scaling_bands\n    g1 = cos(radians(vza))\n    g2 = cos(radians(sza))\n    g3 = cos(radians(saa - vaa))\n    #### FLATTEN THE ARRAY ####\n    flat = list(map(lambda arr: arr.flatten(), [B03.values, B04.values,B8.values, g1.values, g2.values, g3.values]))\n    bands = np.array(flat)\n\n    # inspect the parameter passed\n    inspect(biopar, \"biopar parameter passed to the UDF\") \n\n    #### CALCULATE THE BIOPAR BASED ON THE BANDS #####\n    image = get_bioparrun(biopar).run(bands, output_scale=1,output_dtype=np.float32,minmax_flagging=False)  # netcdf algorithm\n    as_image = image.reshape((g1.shape))\n    ## set nodata to nan\n    as_image[np.where(np.isnan(B03))] = np.nan\n    xr_biopar = vza.copy()\n    xr_biopar.values = as_image\n    \n    return XarrayDataCube(xr_biopar)  # xarray.DataArray(as_image,vza.dims,vza.coords)'''"
                            },
                            "process_id": "run_udf",
                            "result": true
                        }
                    }
                }
            },
            "process_id": "reduce_dimension"
        }
    },
    "public": true
}