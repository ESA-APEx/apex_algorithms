{
  "process_graph": {
    "loadcollection1": {
      "process_id": "load_collection",
      "arguments": {
        "bands": {
          "from_parameter": "bands"
        },
        "id": "SENTINEL2_L2A",
        "properties": {
          "eo:cloud_cover": {
            "process_graph": {
              "lte1": {
                "process_id": "lte",
                "arguments": {
                  "x": {
                    "from_parameter": "value"
                  },
                  "y": {
                    "from_parameter": "max_cloud_cover"
                  }
                },
                "result": true
              }
            }
          }
        },
        "spatial_extent": {
          "from_parameter": "spatial_extent"
        },
        "temporal_extent": {
          "from_parameter": "temporal_extent"
        }
      }
    },
    "loadcollection2": {
      "process_id": "load_collection",
      "arguments": {
        "bands": [
          "B04",
          "B08"
        ],
        "id": "SENTINEL2_L2A",
        "properties": {
          "eo:cloud_cover": {
            "process_graph": {
              "lte2": {
                "process_id": "lte",
                "arguments": {
                  "x": {
                    "from_parameter": "value"
                  },
                  "y": {
                    "from_parameter": "max_cloud_cover"
                  }
                },
                "result": true
              }
            }
          }
        },
        "spatial_extent": {
          "from_parameter": "spatial_extent"
        },
        "temporal_extent": {
          "from_parameter": "temporal_extent"
        }
      }
    },
    "loadcollection3": {
      "process_id": "load_collection",
      "arguments": {
        "bands": [
          "SCL"
        ],
        "id": "SENTINEL2_L2A",
        "properties": {
          "eo:cloud_cover": {
            "process_graph": {
              "lte3": {
                "process_id": "lte",
                "arguments": {
                  "x": {
                    "from_parameter": "value"
                  },
                  "y": {
                    "from_parameter": "max_cloud_cover"
                  }
                },
                "result": true
              }
            }
          }
        },
        "spatial_extent": {
          "from_parameter": "spatial_extent"
        },
        "temporal_extent": {
          "from_parameter": "temporal_extent"
        }
      }
    },
    "apply1": {
      "process_id": "apply",
      "arguments": {
        "data": {
          "from_node": "loadcollection3"
        },
        "process": {
          "process_graph": {
            "eq1": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 3
              }
            },
            "eq2": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 8
              }
            },
            "eq3": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 9
              }
            },
            "eq4": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 10
              }
            },
            "eq5": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 1
              }
            },
            "eq6": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 6
              }
            },
            "eq7": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 11
              }
            },
            "eq8": {
              "process_id": "eq",
              "arguments": {
                "x": {
                  "from_parameter": "x"
                },
                "y": 0
              }
            },
            "arraycreate1": {
              "process_id": "array_create",
              "arguments": {
                "data": [
                  {
                    "from_node": "eq1"
                  },
                  {
                    "from_node": "eq2"
                  },
                  {
                    "from_node": "eq3"
                  },
                  {
                    "from_node": "eq4"
                  },
                  {
                    "from_node": "eq5"
                  },
                  {
                    "from_node": "eq6"
                  },
                  {
                    "from_node": "eq7"
                  },
                  {
                    "from_node": "eq8"
                  }
                ]
              }
            },
            "any1": {
              "process_id": "any",
              "arguments": {
                "data": {
                  "from_node": "arraycreate1"
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "mask1": {
      "process_id": "mask",
      "arguments": {
        "data": {
          "from_node": "loadcollection2"
        },
        "mask": {
          "from_node": "apply1"
        }
      }
    },
    "ndvi1": {
      "process_id": "ndvi",
      "arguments": {
        "data": {
          "from_node": "mask1"
        },
        "nir": "B08",
        "red": "B04"
      }
    },
    "adddimension1": {
      "process_id": "add_dimension",
      "arguments": {
        "data": {
          "from_node": "ndvi1"
        },
        "label": "ndvi",
        "name": "bands2",
        "type": "bands"
      }
    },
    "applydimension1": {
      "process_id": "apply_dimension",
      "arguments": {
        "data": {
          "from_node": "adddimension1"
        },
        "dimension": "t",
        "process": {
          "process_graph": {
            "arrayapply1": {
              "process_id": "array_apply",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "process": {
                  "process_graph": {
                    "max1": {
                      "process_id": "max",
                      "arguments": {
                        "data": {
                          "from_parameter": "data"
                        }
                      }
                    },
                    "neq1": {
                      "process_id": "neq",
                      "arguments": {
                        "x": {
                          "from_parameter": "x"
                        },
                        "y": {
                          "from_node": "max1"
                        }
                      },
                      "result": true
                    }
                  }
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "mergecubes1": {
      "process_id": "merge_cubes",
      "arguments": {
        "cube1": {
          "from_node": "applydimension1"
        },
        "cube2": {
          "from_node": "apply1"
        },
        "overlap_resolver": {
          "process_graph": {
            "max2": {
              "process_id": "max",
              "arguments": {
                "data": [
                  {
                    "from_parameter": "x"
                  },
                  {
                    "from_parameter": "y"
                  }
                ]
              },
              "result": true
            }
          }
        }
      }
    },
    "mask2": {
      "process_id": "mask",
      "arguments": {
        "data": {
          "from_node": "loadcollection1"
        },
        "mask": {
          "from_node": "mergecubes1"
        }
      }
    },
    "reducedimension1": {
      "process_id": "reduce_dimension",
      "arguments": {
        "data": {
          "from_node": "mask2"
        },
        "dimension": "t",
        "reducer": {
          "process_graph": {
            "max3": {
              "process_id": "max",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "result": true
            }
          }
        }
      },
      "result": true
    }
  },
  "id": "max_ndvi_composite",
  "summary": "Sentinel-2 max NDVI composite at 10m resolution.",
  "description": "# Description\n\nThis algorithm generates a Sentinel-2 based composite for a selected area and temporal extent. By default, the resolution of the output is 10 meters.\n\nThe used compositing method is the \"max-NDVI\" method, which selects the pixel with the highest NDVI value for each pixel location and within the time window.\nThe method falls under the 'rank composite' category, and ensures that selected spectral band values for any individual pixel all come from the same observation.\n\nThe method generates good results for timeseries analytics, but spatially neighbouring pixels may be selected from different observations,\nwhich leads to visual discontinuities in the result.\n\n# Performance characteristics\n\nThe method is computationally efficient, as it only requires the B04, B08 and SCL bands to determine the rank score. Loading\nof other bands can be minimized to read only selected observations.\n\n\n# Examples\n\nThe image below shows a typical result over an agricultural area.\n\n![max_ndvi_example.png](max_ndvi_example.png)\n\nThe examples below show typical resource usage figures. They illustrate that the cost varies as a function of the parameters,\nand most importantly that it is not possible to linearly extrapolate the cost from one example to another.\n\n\n## 3-month composite over Denmark\n\nA complete example including STAC metadata is shown here:\n\nhttps://radiantearth.github.io/stac-browser/#/external/s3.waw3-1.cloudferro.com/swift/v1/APEx-examples/max_ndvi_denmark/collection.json\n\nThe processing platform reported these usage statistics for the example:\n\n```\nCredits: 63\nCPU usage: 47.743,722 cpu-seconds\nWall time: 1.948 seconds\nInput Pixel 10.997,635 mega-pixel\nMax Executor Memory: 3,239 gb\nMemory usage: 154.767.121,977 mb-seconds\nNetwork Received: 1.677.537.930.040 b\n```\n\nThe relative cost is 1 CDSE platform credits per km\u00b2 for a 3 month input window.\nThe cost per input pixel is 0.0057 credits per megapixel.\n\n## 15-month composite over Denmark\n\nIn a second example, a longer compositing window was tested, generating a 3-band result. Here we see a lower cost per km\u00b2, but a similar cost per input\npixel.\n\n```\nCredits: 189\nCPU usage: 77.621,979 cpu-seconds\nWall time: 5.499 seconds\nInput Pixel: 31.494,448 mega-pixel\nMax Executor Memory: 4,332 gb\nMemory usage: 564.094.942,143 mb-seconds\nNetwork Received: 872.636.866.126 b\n```\n\nThe relative cost is 0.03 CDSE platform credits per km\u00b2 for a 15 month input window.\nThe cost per input pixel is 0.006 credits per megapixel.\n\n# Literature references\n\nThe max-ndvi compositing method has been applied to multiple sensors, as described in literature:\n\nThis publication describes characteristics of the method when applied to AVHRR data:\nhttps://www.tandfonline.com/doi/abs/10.1080/01431168608948945\n\nThis publication applied it to Landsat data, for cropland estimation:\nhttps://www.nature.com/articles/s43016-021-00429-z\n\n# Known limitations\n\nThe method uses a vegetation index as scoring metric to determine the best pixel, making it only suitable for land applications.\nBare or urban areas may not be well represented in the composite.\n\nIt favours the observation which is least contaminated by atmospheric effects, but does not guarantee a fully uncontaminated composite.\n\nFor individual time windows of up to 3 months, the method was efficient up to 100x100km areas. For larger areas of interest, we recommend splitting the area into smaller tiles.\n\n\n# Known artifacts\n\nArtifacts are expected over water and urban areas.\n\n![max_ndvi_water_artifacts.png](max_ndvi_water_artifacts.png)\n\nResidual cloud artifacts may be present in the composite, especially for smaller time windows or during cloudy seasons.\nThe cloud artifacts are caused by the limited capabilities of the default Sentinel-2 cloud detection mechanism to correctly identify all clouds.\n\n![max_ndvi_cloud_artifacts.png](max_ndvi_cloud_artifacts.png)\n",
  "returns": {
    "description": "A data cube with the newly computed values.\n\nAll dimensions stay the same, except for the dimensions specified in corresponding parameters. There are three cases how the dimensions can change:\n\n1. The source dimension is the target dimension:\n   - The (number of) dimensions remain unchanged as the source dimension is the target dimension.\n   - The source dimension properties name and type remain unchanged.\n   - The dimension labels, the reference system and the resolution are preserved only if the number of values in the source dimension is equal to the number of values computed by the process. Otherwise, all other dimension properties change as defined in the list below.\n2. The source dimension is not the target dimension. The target dimension exists with a single label only:\n   - The number of dimensions decreases by one as the source dimension is 'dropped' and the target dimension is filled with the processed data that originates from the source dimension.\n   - The target dimension properties name and type remain unchanged. All other dimension properties change as defined in the list below.\n3. The source dimension is not the target dimension and the latter does not exist:\n   - The number of dimensions remain unchanged, but the source dimension is replaced with the target dimension.\n   - The target dimension has the specified name and the type other. All other dimension properties are set as defined in the list below.\n\nUnless otherwise stated above, for the given (target) dimension the following applies:\n\n- the number of dimension labels is equal to the number of values computed by the process,\n- the dimension labels are incrementing integers starting from zero,\n- the resolution changes, and\n- the reference system is undefined.",
    "schema": {
      "type": "object",
      "subtype": "datacube"
    }
  },
  "categories": [
    "sentinel-2",
    "composites",
    "vegetation"
  ],
  "parameters": [
    {
      "name": "spatial_extent",
      "description": "Limits the data to process to the specified bounding box or polygons.\n\nFor raster data, the process loads the pixel into the data cube if the point\nat the pixel center intersects with the bounding box or any of the polygons\n(as defined in the Simple Features standard by the OGC).\n\nFor vector data, the process loads the geometry into the data cube if the geometry\nis fully within the bounding box or any of the polygons (as defined in the\nSimple Features standard by the OGC). Empty geometries may only be in the\ndata cube if no spatial extent has been provided.\n\nEmpty geometries are ignored.\n\nSet this parameter to null to set no limit for the spatial extent.",
      "schema": [
        {
          "title": "Bounding Box",
          "type": "object",
          "subtype": "bounding-box",
          "required": [
            "west",
            "south",
            "east",
            "north"
          ],
          "properties": {
            "west": {
              "description": "West (lower left corner, coordinate axis 1).",
              "type": "number"
            },
            "south": {
              "description": "South (lower left corner, coordinate axis 2).",
              "type": "number"
            },
            "east": {
              "description": "East (upper right corner, coordinate axis 1).",
              "type": "number"
            },
            "north": {
              "description": "North (upper right corner, coordinate axis 2).",
              "type": "number"
            },
            "base": {
              "description": "Base (optional, lower left corner, coordinate axis 3).",
              "type": [
                "number",
                "null"
              ],
              "default": null
            },
            "height": {
              "description": "Height (optional, upper right corner, coordinate axis 3).",
              "type": [
                "number",
                "null"
              ],
              "default": null
            },
            "crs": {
              "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/) or [WKT2 CRS string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
              "anyOf": [
                {
                  "title": "EPSG Code",
                  "type": "integer",
                  "subtype": "epsg-code",
                  "minimum": 1000,
                  "examples": [
                    3857
                  ]
                },
                {
                  "title": "WKT2",
                  "type": "string",
                  "subtype": "wkt2-definition"
                }
              ],
              "default": 4326
            }
          }
        },
        {
          "title": "Vector data cube",
          "description": "Limits the data cube to the bounding box of the given geometries in the vector data cube. For raster data, all pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`). Empty geometries are ignored.",
          "type": "object",
          "subtype": "datacube",
          "dimensions": [
            {
              "type": "geometry"
            }
          ]
        },
        {
          "title": "No filter",
          "description": "Don't filter spatially. All data is included in the data cube.",
          "type": "null"
        }
      ]
    },
    {
      "name": "temporal_extent",
      "description": "Temporal extent specified as two-element array with start and end date/date-time.",
      "schema": {
        "type": "array",
        "subtype": "temporal-interval",
        "uniqueItems": true,
        "minItems": 2,
        "maxItems": 2,
        "items": {
          "anyOf": [
            {
              "type": "string",
              "subtype": "date-time",
              "format": "date-time"
            },
            {
              "type": "string",
              "subtype": "date",
              "format": "date"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "name": "max_cloud_cover",
      "description": "The maximum cloud cover percentage to filter Sentinel-2 inputs at full product level.\n    By reducing the percentage, fewer input products are considered, which also potentially increases the risk of missing valid data.\n    We do not recommend setting it higher than 95%, as this decreases performance by reading very cloudy areas with little chance of finding good pixels.\n\n    For composites over large time ranges, a reduced value can help to consider only good quality input products, with few undetected clouds.\n    ",
      "schema": {
        "type": "number"
      },
      "optional": true,
      "default": 75.0
    },
    {
      "name": "bands",
      "description": "Sentinel-2 L2A bands to include in the composite.",
      "schema": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "B02",
            "B03",
            "B04",
            "B05",
            "B06",
            "B07",
            "B08",
            "B8A",
            "B11",
            "B12"
          ]
        }
      },
      "optional": true,
      "default": [
        "B04",
        "B03",
        "B02"
      ]
    }
  ]
}