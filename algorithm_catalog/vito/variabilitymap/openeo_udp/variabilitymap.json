{
  "process_graph": {
    "loadcollection1": {
      "process_id": "load_collection",
      "arguments": {
        "bands": [
          "B03",
          "B04",
          "B08",
          "sunAzimuthAngles",
          "sunZenithAngles",
          "viewAzimuthMean",
          "viewZenithMean"
        ],
        "id": "SENTINEL2_L2A",
        "spatial_extent": {
          "from_parameter": "spatial_extent"
        },
        "temporal_extent": {
          "from_parameter": "temporal_extent"
        }
      }
    },
    "loadcollection2": {
      "process_id": "load_collection",
      "arguments": {
        "bands": [
          "SCL"
        ],
        "id": "SENTINEL2_L2A",
        "spatial_extent": {
          "from_parameter": "spatial_extent"
        },
        "temporal_extent": {
          "from_parameter": "temporal_extent"
        }
      }
    },
    "toscldilationmask1": {
      "process_id": "to_scl_dilation_mask",
      "arguments": {
        "data": {
          "from_node": "loadcollection2"
        }
      }
    },
    "mask1": {
      "process_id": "mask",
      "arguments": {
        "data": {
          "from_node": "loadcollection1"
        },
        "mask": {
          "from_node": "toscldilationmask1"
        }
      }
    },
    "reducedimension1": {
      "process_id": "reduce_dimension",
      "arguments": {
        "data": {
          "from_node": "mask1"
        },
        "dimension": "bands",
        "reducer": {
          "process_graph": {
            "runudf1": {
              "process_id": "run_udf",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "runtime": "Python",
                "udf": "\"\"\"\nImport the biopar library and the BioParNp class to calculate the FAPAR index.\nIt is the Python implementation of biophysical parameter computation, \nas described here: http://step.esa.int/docs/extra/ATBD_S2ToolBox_L2B_V1.1.pdf\n\"\"\"\nfrom functools import lru_cache\nimport numpy as np\nfrom typing import Dict\nfrom numpy import cos, radians\n\nfrom openeo.udf.xarraydatacube import XarrayDataCube\nfrom biopar.bioparnp import BioParNp\n\n\n@lru_cache(maxsize=6)\ndef get_bioparrun(biopar) -> BioParNp:\n    return BioParNp(version='3band', parameter=biopar, singleConfig = True)\n \n\ndef apply_datacube(cube: XarrayDataCube, context: Dict) -> XarrayDataCube:\n    ds_date = cube.get_array()\n\n    ### LOAD THE DIFFERENT REQUIRED BANDS FOR THE 8-BAND FAPAR\n    scaling_bands = 0.0001\n\n    saa = ds_date.sel(bands='sunAzimuthAngles')\n    sza = ds_date.sel(bands=\"sunZenithAngles\")\n    vaa = ds_date.sel(bands=\"viewAzimuthMean\")\n    vza = ds_date.sel(bands=\"viewZenithMean\")\n\n    B03 = ds_date.sel(bands='B03') * scaling_bands\n    B04 = ds_date.sel(bands='B04') * scaling_bands\n    B8 = ds_date.sel(bands='B08') * scaling_bands\n\n    g1 = cos(radians(vza))\n    g2 = cos(radians(sza))\n    g3 = cos(radians(saa - vaa))\n\n    #### FLATTEN THE ARRAY ####\n    flat = list(map(lambda arr: arr.flatten(),\n                    [B03.values, B04.values, B8.values, g1.values, g2.values, g3.values]))\n    bands = np.array(flat)\n\n    #### CALCULATE THE BIOPAR BASED ON THE BANDS #####\n    \n    image = get_bioparrun('FAPAR').run(bands,\n                                       output_scale=1,\n                                       output_dtype=np.float32,\n                                       minmax_flagging=False)  # netcdf algorithm\n    as_image = image.reshape((g1.shape))\n\n    ## SET NOTDATA TO NAN\n    as_image[np.where(np.isnan(B03))] = np.nan\n    xr_biopar = vza.copy()\n    xr_biopar.values = as_image\n    return XarrayDataCube(xr_biopar)"
              },
              "result": true
            }
          }
        }
      }
    },
    "adddimension1": {
      "process_id": "add_dimension",
      "arguments": {
        "data": {
          "from_node": "reducedimension1"
        },
        "label": "FAPAR",
        "name": "bands",
        "type": "bands"
      }
    },
    "applypolygon1": {
      "process_id": "apply_polygon",
      "arguments": {
        "data": {
          "from_node": "adddimension1"
        },
        "geometries": {
          "from_parameter": "spatial_extent"
        },
        "mask_value": 999.0,
        "process": {
          "process_graph": {
            "runudf2": {
              "process_id": "run_udf",
              "arguments": {
                "context": {
                  "mask_value": 999.0,
                  "raw": {
                    "from_parameter": "raw"
                  },
                  "band": "FAPAR"
                },
                "data": {
                  "from_parameter": "data"
                },
                "runtime": "Python",
                "udf": "from numpy import float32\nimport xarray as xr\nimport numpy as np\nfrom openeo.udf.xarraydatacube import XarrayDataCube\n\n\ndef mask_values(data: xr.DataArray, values: list, drop: bool) -> xr.DataArray:\n    \"\"\"\n    Mask a list of values in a given xarray DataArray\n    :param data: xarray DataArray to mask\n    :param values: Values that should be masked\n    :param drop: Flag indicating if the values should be removed from the array\n    :return:\n    \"\"\"\n    result = data.copy()\n    for value in values:\n        result = result.where(data != value, drop=drop)\n    return result\n\ndef generate_map(array: xr.DataArray, band: str, mask: float, raw: bool) -> XarrayDataCube:\n    \"\"\"\n    Generate the variability map by taking the relative difference between all pixel values and the median value of\n    the field. These differences are then categorized in bins to represent the different zones in the field.\n    :param array: Data array containing the pixel values\n    :param band: Name of the band on which to base the variability map\n    :param mask: Value that should be masked in the data array\n    :param raw:  Flag indicating if the raw values should be returned\n    :return: DataCube containing the same set of pixels but the value is set to one of the different zones\n    \"\"\"\n    # Get the x array containing the time series\n    values = array.where(array != mask).astype(float32)\n    pixels = mask_values(data=values, values=[mask], drop=True)\n    medians = pixels.median(dim=[\"x\", \"y\"], skipna=True)\n    min = 0.85\n    max = 1.15\n    step = 0.1\n    relative_diff = (1 + (values - medians) / medians) * 100\n\n    if raw:\n        data = relative_diff\n    else:\n        bins = np.arange(min, max + step, step)\n        bins = np.concatenate([[0], bins, [255]])\n        bins = bins * 100\n        data = np.digitize(relative_diff,\n                              bins=bins).astype(float32)\n        data = np.ma.masked_array(data=data, mask=(data == 6), fill_value=np.nan).filled()\n\n    result = array.copy()\n    result.values = data\n    return XarrayDataCube(result)\n\n\ndef apply_datacube(cube: XarrayDataCube, context) -> XarrayDataCube:\n    mask_value = context.get('mask_value', 999.0)\n    raw = context.get('raw', False)\n    band = context.get('band', 'FAPAR')\n    return generate_map(array=cube.get_array(), band=band, mask=mask_value, raw=raw)"
              },
              "result": true
            }
          }
        }
      }
    },
    "apply1": {
      "process_id": "apply",
      "arguments": {
        "data": {
          "from_node": "applypolygon1"
        },
        "process": {
          "process_graph": {
            "linearscalerange1": {
              "process_id": "linear_scale_range",
              "arguments": {
                "inputMax": 100,
                "inputMin": 0,
                "outputMax": 100,
                "outputMin": 0,
                "x": {
                  "from_parameter": "x"
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "renamelabels1": {
      "process_id": "rename_labels",
      "arguments": {
        "data": {
          "from_node": "apply1"
        },
        "dimension": "bands",
        "target": [
          "variability"
        ]
      },
      "result": true
    }
  },
  "id": "variabilitymap",
  "summary": "Daily crop performance calculation",
  "description": "# Variability Map\nVariability maps show the spatial variation in crop performance within a field on a given date. These variations can stem from differences in soil type, hydrology, pests, diseases, or extreme weather events like drought, hail, storms, or floods.\n\nA farmer can use these variability maps to check for anomalies, or they can be used as input for variable-rate fertilization or irrigation to adjust the dose of fertilizer or water according to the spatial variation within the field.\nThe base index for calculating the variability maps is fAPAR, the fraction of absorbed photosynthetically active radiation derived from Sentinel-2 satellite images with a spatial resolution of 10m. For each cloud-free satellite image, we compare each pixel's fAPAR value to the field's median fAPAR value (pixel values are expressed as % of the median). The result is a GeoTIFF image showing the deviations.\n\n![Variability Map - Average deviations](https://artifactory.vgt.vito.be:443/auxdata-public/Nextland/services/descriptions/yieldpotentialmap/yieldmap_raw.png)\n\n*Example of a variability map (single date)*\n\nFinally, the deviations are classified into five categories according to their relevance, and color maps are generated.\n\n| Range    | Class | Color           |\n|----------|-------|-----------------|\n| <85%     | 1     | red             |\n| 85-95%   | 2     | orange          |\n| 95-105%  | 3     | light green     |\n| 105-115% | 4     | dark green      |\n| >115%    | 5     | darkest green   |\n\nIn the red and orange zones, lower fAPAR values are found, while in the green and dark green zones, the fAPAR values are (much) higher than the median value. It is assumed that the crop performs better in the dark green zones than in the orange and red zones.\n\n![Variability Map - Categorized](https://artifactory.vgt.vito.be:443/auxdata-public/Nextland/services/descriptions/yieldpotentialmap/yieldmap_categories.png)\n![Variability Map - Legend](https://artifactory.vgt.vito.be:443/auxdata-public/Nextland/services/descriptions/yieldpotentialmap/yieldmap_legend.png)\n\n*Example of a variability color map (deviations classified into five categories)*\n\nAlso, the UDP uses the Bio-Physical Parameter (biopar) package to calculate the fAPAR values. The biopar package is a Python package that calculates biophysical parameters from Sentinel-2 satellite images as described [here](http://step.esa.int/docs/extra/ATBD_S2ToolBox_L2B_V1.1.pdf). \n\nA detailed document on the Quality Assessment of the generated products can be found [here](https://docs.terrascope.be/DataProducts/Sentinel-2/ATBD/VITO_S2_QAR_S2_BIOPAR_inter-comparison_V200_V102.pdf).",
  "parameters": [
    {
      "name": "temporal_extent",
      "description": "Temporal extent specified as two-element array with start and end date/date-time. \nThis is date range for which to apply the data fusion",
      "schema": {
        "type": "array",
        "subtype": "temporal-interval",
        "uniqueItems": true,
        "minItems": 2,
        "maxItems": 2,
        "items": {
          "anyOf": [
            {
              "type": "string",
              "subtype": "date-time",
              "format": "date-time"
            },
            {
              "type": "string",
              "subtype": "date",
              "format": "date"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "name": "spatial_extent",
      "description": "Limits the data to process to the specified bounding box or polygons.\nFor raster data, the process loads the pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\nFor vector data, the process loads the geometry into the data cube if the geometry is fully within the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC). Empty geometries may only be in the data cube if no spatial extent has been provided.\nEmpty geometries are ignored.\nSet this parameter to null to set no limit for the spatial extent.",
      "schema": [
        {
          "title": "Bounding Box",
          "type": "object",
          "subtype": "bounding-box",
          "required": [
            "west",
            "south",
            "east",
            "north"
          ],
          "properties": {
            "west": {
              "description": "West (lower left corner, coordinate axis 1).",
              "type": "number"
            },
            "south": {
              "description": "South (lower left corner, coordinate axis 2).",
              "type": "number"
            },
            "east": {
              "description": "East (upper right corner, coordinate axis 1).",
              "type": "number"
            },
            "north": {
              "description": "North (upper right corner, coordinate axis 2).",
              "type": "number"
            },
            "base": {
              "description": "Base (optional, lower left corner, coordinate axis 3).",
              "type": [
                "number",
                "null"
              ],
              "default": null
            },
            "height": {
              "description": "Height (optional, upper right corner, coordinate axis 3).",
              "type": [
                "number",
                "null"
              ],
              "default": null
            },
            "crs": {
              "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/) or [WKT2 CRS string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
              "anyOf": [
                {
                  "title": "EPSG Code",
                  "type": "integer",
                  "subtype": "epsg-code",
                  "minimum": 1000,
                  "examples": [
                    3857
                  ]
                },
                {
                  "title": "WKT2",
                  "type": "string",
                  "subtype": "wkt2-definition"
                }
              ],
              "default": 4326
            }
          }
        },
        {
          "title": "Vector data cube",
          "description": "Limits the data cube to the bounding box of the given geometries in the vector data cube. For raster data, all pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`). Empty geometries are ignored.",
          "type": "object",
          "subtype": "datacube",
          "dimensions": [
            {
              "type": "geometry"
            }
          ]
        },
        {
          "title": "No filter",
          "description": "Don't filter spatially. All data is included in the data cube.",
          "type": "null"
        }
      ]
    },
    {
      "name": "raw",
      "description": "Flag indicating if the yield map contains the raw differences or the result is categorized",
      "schema": {
        "type": "boolean"
      },
      "default": false,
      "optional": true
    }
  ]
}