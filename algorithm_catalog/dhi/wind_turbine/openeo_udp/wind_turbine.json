{
  "process_graph": {
    "detection": {
      "process_id": "wind_turbine_detection",
      "namespace": "apex",
      "arguments": {
        "bbox": {"from_parameter": "spatial_extent"},
        "year": {"from_parameter": "year"}
      },
      "result": true
    }
  },
  "id": "wind_turbine_detection",
  "summary": "Wind turbine detection",
  "description": "# Description\n\nDetects wind turbines in open landscapes using Sentinel-2 imagery and a pre-trained computer vision object detection model.\nOpen landscapes can be considered all landscapes outside of built-up urban and peri-urban areas together with forested areas. \nIn general open landscapes is mainly comprised of open agricultural land and nature areas. \n\nThe user selects a region of interest and specifies a year to analyze. \nThe best available Sentinel-2 imagery for the selected region is ranked based on quality metrics and\nthe highest ranked image is chosen for wind turbine detection, based on several ranking parameters. \nThe Sentinel-2 imagery is then passed to the pre-trained neural network that returns the bounding boxes \nfor each detected turbine. Wind turbines are reported with a detection probability on the scale\nof 0 - 1. The higher the probability of the detection, the higher confidence that it is a TRUE detection.\n\nAdditional filtering is applied to account for multiple detections in close proximity. \nThe end result includes a .geojson file defining the bounding box of all wind turbine detections \nwith the detection date and probability as attributes. The service is so far applicable\nto Central Europe, with plans to expand further. \n\n\n# Performance characteristics\n\nThe costs of this service are based on the requested output area, making it independent of platform performance.\nAn example run of 220kmÂ² takes up to 30 minutes to complete, while smaller test areas complete drastically faster. \n\n\n# Examples\n\nBelow we overlay a Sentinel2-RGB image with the ML classification, thereby highlighting the detected areas.\n\n![wind_turbine_output](wind_turbine_example.png)\n\n# Known limitations\n\nWorks in open landscapes only, see description.",
  "returns": {
    "description": "A vector data cube with the locations of detected wind turbines.\n\nAll dimensions stay the same, except for the dimensions specified in corresponding parameters. There are three cases how the dimensions can change:\n\n1. The source dimension is the target dimension:\n   - The (number of) dimensions remain unchanged as the source dimension is the target dimension.\n   - The source dimension properties name and type remain unchanged.\n   - The dimension labels, the reference system and the resolution are preserved only if the number of values in the source dimension is equal to the number of values computed by the process. Otherwise, all other dimension properties change as defined in the list below.\n2. The source dimension is not the target dimension. The target dimension exists with a single label only:\n   - The number of dimensions decreases by one as the source dimension is 'dropped' and the target dimension is filled with the processed data that originates from the source dimension.\n   - The target dimension properties name and type remain unchanged. All other dimension properties change as defined in the list below.\n3. The source dimension is not the target dimension and the latter does not exist:\n   - The number of dimensions remain unchanged, but the source dimension is replaced with the target dimension.\n   - The target dimension has the specified name and the type other. All other dimension properties are set as defined in the list below.\n\nUnless otherwise stated above, for the given (target) dimension the following applies:\n\n- the number of dimension labels is equal to the number of values computed by the process,\n- the dimension labels are incrementing integers starting from zero,\n- the resolution changes, and\n- the reference system is undefined.",
    "schema": {
      "type": "object",
      "subtype": "datacube"
    }
  },
  "categories": [
    "sentinel-2",
    "WIND ENERGY PRODUCTION/USE"
  ],
  "parameters": [
    {
      "name": "spatial_extent",
      "description": "Limits the data to process to the specified bounding box or polygons.\n\nFor raster data, the process loads the pixel into the data cube if the point\nat the pixel center intersects with the bounding box or any of the polygons\n(as defined in the Simple Features standard by the OGC).\n\nFor vector data, the process loads the geometry into the data cube if the geometry\nis fully within the bounding box or any of the polygons (as defined in the\nSimple Features standard by the OGC). Empty geometries may only be in the\ndata cube if no spatial extent has been provided.\n\nEmpty geometries are ignored.\n\nSet this parameter to null to set no limit for the spatial extent.",
      "schema": [
        {
          "title": "Bounding Box",
          "type": "object",
          "subtype": "bounding-box",
          "required": [
            "west",
            "south",
            "east",
            "north"
          ],
          "properties": {
            "west": {
              "description": "West (lower left corner, coordinate axis 1).",
              "type": "number"
            },
            "south": {
              "description": "South (lower left corner, coordinate axis 2).",
              "type": "number"
            },
            "east": {
              "description": "East (upper right corner, coordinate axis 1).",
              "type": "number"
            },
            "north": {
              "description": "North (upper right corner, coordinate axis 2).",
              "type": "number"
            },
            "base": {
              "description": "Base (optional, lower left corner, coordinate axis 3).",
              "type": [
                "number",
                "null"
              ],
              "default": null
            },
            "height": {
              "description": "Height (optional, upper right corner, coordinate axis 3).",
              "type": [
                "number",
                "null"
              ],
              "default": null
            },
            "crs": {
              "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/) or [WKT2 CRS string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
              "anyOf": [
                {
                  "title": "EPSG Code",
                  "type": "integer",
                  "subtype": "epsg-code",
                  "minimum": 1000,
                  "examples": [
                    3857
                  ]
                },
                {
                  "title": "WKT2",
                  "type": "string",
                  "subtype": "wkt2-definition"
                }
              ],
              "default": 4326
            }
          }
        },
        {
          "title": "Vector data cube",
          "description": "Limits the data cube to the bounding box of the given geometries in the vector data cube. For raster data, all pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`). Empty geometries are ignored.",
          "type": "object",
          "subtype": "datacube",
          "dimensions": [
            {
              "type": "geometry"
            }
          ]
        },
        {
          "title": "No filter",
          "description": "Don't filter spatially. All data is included in the data cube.",
          "type": "null"
        }
      ]
    },
    {
      "default": "2024",
      "description": "The year for wind turbine detection.",
      "name": "year",
      "optional": true,
      "schema": {
        "type": "string"
      }
    }
  ],
  "default_job_options": {
    "max-executors": 20,
    "python-memory": "4500m",
    "executor-memory": "1g",
    "soft-errors": "true",
    "executor-cores": 1,
    "image-name": "python38"
  }
}
